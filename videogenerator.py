# -*- coding: utf-8 -*-
"""VideoGenerator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xaA4A6UoDzoH0jPQA3Z3TJpCA93bOIv8
"""

"""!pip install streamlit
!pip install python-docx
!pip install python-pptx
!pip install pillow
!pip install gTTS
!pip install moviepy"""

"""import streamlit as st
from utils.extract_doc_py import extract_text_from_docx, extract_text_from_pptx, load_image
from utils.tts_engine import generate_audio_gtts
from utils.video_utils import generate_slide_image, create_video_with_audio, split_text_into_chunks
import tempfile
import os

def video_tab():
    st.header("üé¨ Narrated Video Generator with Subtitles")

    uploaded_file = st.file_uploader("Upload .docx, .pptx, or .jpg", type=["docx", "pptx", "jpg", "jpeg", "png"])

    if uploaded_file is not None:
        file_name = uploaded_file.name.lower()

        # Extract text or image
        if file_name.endswith(".docx"):
            extracted_text = extract_text_from_docx(uploaded_file)
        elif file_name.endswith(".pptx"):
            extracted_text = extract_text_from_pptx(uploaded_file)
        elif file_name.endswith((".jpg", ".jpeg", ".png")):
            extracted_text = st.text_area("üìÑ Enter narration text for image", height=200)
            image = load_image(uploaded_file)
        else:
            st.error("Unsupported file type.")
            return

        # Split text for narration and slides
        if not file_name.endswith((".jpg", ".jpeg", ".png")):
            chunks = split_text_into_chunks(extracted_text)
        else:
            chunks = [extracted_text]

        if st.button("üé• Generate Narrated Video"):
            with st.spinner("Processing..."):

                slide_clips = []

                for i, chunk in enumerate(chunks):
                    st.write(f"‚ñ∂Ô∏è Processing chunk {i+1}/{len(chunks)}")

                    # Generate TTS audio
                    audio_path = generate_audio_gtts(chunk)

                    # Generate image slide
                    if file_name.endswith((".jpg", ".jpeg", ".png")):
                        slide_img = image
                    else:
                        slide_img = generate_slide_image(chunk)

                    # Output path
                    out_path = tempfile.mktemp(suffix=f"_slide{i+1}.mp4")

                    # Create video with audio
                    create_video_with_audio(slide_img, audio_path, out_path)
                    slide_clips.append(out_path)

                # Combine all video clips
                from moviepy.editor import concatenate_videoclips, VideoFileClip

                final_clips = [VideoFileClip(c) for c in slide_clips]
                final_video = concatenate_videoclips(final_clips)

                output_video_path = os.path.join(tempfile.gettempdir(), "final_narrated_video.mp4")
                final_video.write_videofile(output_video_path, fps=24)

                st.success("‚úÖ Video generated successfully!")

                # Show video
                st.video(output_video_path)

                # Download button
                with open(output_video_path, "rb") as f:
                    st.download_button(
                        label="üì• Download MP4",
                        data=f,
                        file_name="narrated_video.mp4",
                        mime="video/mp4"
                    )"""
import streamlit as st
from videogenerator import generate_video_with_ffmpeg
import base64
import os

def video_tab():
    st.header("üìÑ Upload File to Generate Narrated Video")
    uploaded_file = st.file_uploader("Upload .docx, .pptx, or .jpg", type=["docx", "pptx", "jpg", "jpeg", "png"])

    if uploaded_file is not None:
        filename = uploaded_file.name

        with st.spinner("Generating video..."):
            output_path = generate_video_with_ffmpeg(uploaded_file, filename)

            if output_path and os.path.exists(output_path):
                st.success("‚úÖ Video generated successfully!")
                st.video(output_path)

                # Provide download link
                with open(output_path, "rb") as f:
                    video_bytes = f.read()
                    b64 = base64.b64encode(video_bytes).decode()
                    href = f'<a href="data:video/mp4;base64,{b64}" download="narrated_video.mp4">üì• Download MP4</a>'
                    st.markdown(href, unsafe_allow_html=True)
            else:
                st.error("‚ùå Failed to generate video.")


